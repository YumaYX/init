---
# tasks file for roles/ruby
- name: Ensure CRB repository is enabled
  ansible.builtin.command: bash -lc "dnf config-manager --set-enabled crb"
  register: result
  changed_when: result.rc != 0

- name: Install necessary packages for Ruby
  ansible.builtin.dnf:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - bzip2
      - gcc
      - openssl-devel
      - readline-devel
      - zlib-devel
      - libyaml-devel
      - git
      - rust
      - cargo

- name: Install necessary packages for Gem
  ansible.builtin.dnf:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - libffi-devel

- name: Git clone rbenv
  ansible.builtin.git:
    repo: https://github.com/rbenv/rbenv.git
    dest: /home/{{ prime_user }}/.rbenv
  become: true
  become_user: "{{ prime_user }}"

- name: Git clone ruby-build
  ansible.builtin.git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: /home/{{ prime_user }}/.rbenv/plugins/ruby-build
  become: true
  become_user: "{{ prime_user }}"

- name: Check Ruby installation
  ansible.builtin.command: bash -lc "ruby -v"
  ignore_errors: true
  become: true
  become_user: "{{ prime_user }}"
  register: command_result
  changed_when: command_result.rc != 0
  failed_when: false

- name: Install Ruby
  ansible.builtin.shell: /bin/bash -lc "CONFIGURE_OPTS='--disable-install-doc' rbenv install {{ ruby_version }} && rbenv global {{ ruby_version }}"
  become: true
  become_user: "{{ prime_user }}"
  when: ('ruby ' + ruby_version) not in command_result.stdout
  register: result
  changed_when: result.rc != 0

- name: Update Gems system
  ansible.builtin.command: bash -lc "gem update --system"
  become: true
  become_user: "{{ prime_user }}"
  register: result
  changed_when: result.rc != 0

- name: Install necessary gems
  community.general.gem:
    name: "{{ item }}"
    executable: /home/{{ prime_user }}/.rbenv/shims/gem
    user_install: false
  with_items:
    - bundler
    - minitest
    - rake
    - roo
    - rubocop
    - activerecord
    - sqlite3
  become: true
  become_user: "{{ prime_user }}"

- name: Update Gems
  ansible.builtin.command: bash -lc "gem update"
  become: true
  become_user: "{{ prime_user }}"
  register: result
  changed_when: result.rc != 0

- name: Gem update - cron
  ansible.builtin.cron:
    name: gem-update-cron
    minute: "30"
    job: gem update --system && gem update
    user: "{{ prime_user }}"
